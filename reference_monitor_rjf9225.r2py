"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
"""

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    #if A already exists, copy it into B, else, write 'SE' default into A if creating a new file
    if self.Afn in listfiles():
      self.Afile, self.Bfile = create_files(self.Afn, self.Bfn)
      self.Bfile.writeat(self.Afile.readat(None,0),0)
    else:
      if create:
        self.Afile, self.Bfile = create_files(self.Afn, self.Bfn)
        self.Afile.writeat('SE', 0)

    #create a primitive lock object that guards against simultaneous accesses
    self.Afile.lock = createlock()
    self.Bfile.lock = createlock()

  def writeat(self,data,offset):
    self.Bfile.lock.acquire(True)
    length = len(self.Bfile.readat(None,0))
    #sources of error with writing
    if offset < 0 or offset > length:
        self.Bfile.lock.release()
    else:
      if type(data) == str or type(data) == int:
          self.Bfile.writeat(data,offset)
          self.Bfile.lock.release()
        


  def readat(self,bytes,offset):
    self.Afile.lock.acquire(True)
    length = len(self.Afile.readat(None,0))
    #trying to read outside of offsets or if length is invalid
    if (length < 0) or (length > 10000) or (offset < 0 or offset > length):
        self.Afile.lock.release();
    #bytes overflow read errors
    elif (bytes != None and bytes > length) or (bytes != None and bytes < 0):
        self.Afile.lock.release();
    else:
        read_data = self.Afile.readat(bytes,offset)
        self.Afile.lock.release()
        return read_data



  def close(self):
    self.Afile.lock.acquire(True);
    self.Bfile.lock.acquire(True);
    #rewriting these, so need to store
    a_info = self.Afile.readat(None,0);
    b_info = self.Bfile.readat(None,0);
    Afn = self.Afn;
    #create new Afile and Bfile with updated data, so we need to close the existing ones and remove
    self.Afile.close()
    self.Bfile.close()

    #remove the Afn file because it is going to be rewritten using the Bfn file
    removefile(self.Afn)

    self.lock = createlock();
    self.lock.acquire(True);
    if isValid(b_info) and isValid(a_info):
      #update file with b info
      openfile(Afn,True).writeat(b_info,0)
    else:
      #update file with a_info, since b is not valid
      openfile(Afn,True).writeat(a_info,0)
    self.lock.release();

    #finally remove the Bfn file
    removefile(self.Bfn)
    self.Afile.lock.release();
    self.Bfile.lock.release();

    
def ABopenfile(filename, create):
    return ABFile(filename,create)

def isValid(file):
  return len(file) >= 2 and file[0] == 'S' and file[-1] == 'E';

def create_files(a,b):
  Afile = openfile(a,True);
  Bfile = openfile(b,True);
  return Afile, Bfile

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,int)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,int,type(None)),(int,int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
