
"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
        self.Afile = openfile(self.Afn,create)
        if self.Bfn in listfiles():
            remove(self.Bfn);
        self.Bfile = openfile(self.Bfn,create);  
    
    if self.Afile.readat(None,0) == "":
        self.Afile.writeat('SE',0);


    backup = self.Afile.readat(None,0);
    self.Bfile.writeat(backup,0);


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    if offset >= 0 and offset <= 500 and type(data) is str:
        self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    read = ""; 
    if offset >= 0:
        read = self.Afile.readat(bytes,offset)

    return read

  def close(self):
    info = self.Bfile.readat(None,0)
    if isValid(info):
        self.Afile.writeat(info, 0);
    self.Bfile.close();
    if self.Bfn in listfiles():
        removefile(self.Bfn);
    self.Afile.close();

def ABopenfile(filename, create):
  return ABFile(filename,create)

def isValid(file):
    return len(file) >= 2 and file[0] == "S" and file[-1] == "E"


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()